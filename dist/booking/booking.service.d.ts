import { CreateBookingDto } from './dto/create-booking.dto';
import { CreateBidDto, UpdateBidDto, BidResponseDto, BidStatus } from '../bidding/dto/create-bid.dto';
import { EmailService } from '../email/email.service';
import { PrismaService } from '../prisma/prisma.service';
import { HelperService } from '../shared/helper.service';
import { Booking, BookingStatus } from '@prisma/client';
export { BookingStatus } from '@prisma/client';
export interface BookingEntity {
    id: string;
    shipperId: string;
    shipperCompany: string;
    referenceNumber?: string;
    description: string;
    pickupLocation: {
        locationName?: string;
        address: string;
        city: string;
        state: string;
        postalCode?: string;
        countryCode: string;
        latitude?: number;
        longitude?: number;
        specialInstructions?: string;
        contactPerson?: string;
        contactPhone?: string;
    };
    deliveryLocation: {
        locationName?: string;
        address: string;
        city: string;
        state: string;
        postalCode?: string;
        countryCode: string;
        latitude?: number;
        longitude?: number;
        specialInstructions?: string;
        contactPerson?: string;
        contactPhone?: string;
    };
    cargoDetails: {
        description: string;
        type: string;
        weight: number;
        volume?: number;
        length?: number;
        width?: number;
        height?: number;
        quantity?: number;
        unit?: string;
        declaredValue?: number;
        requiresRefrigeration?: boolean;
        requiredTemperature?: number;
        isFragile?: boolean;
        isHazardous?: boolean;
        hazardousClass?: string;
        specialHandling?: string;
    };
    preferredTruckType: string;
    preferredPickupTime: string;
    latestPickupTime?: string;
    requiredDeliveryTime?: string;
    urgencyLevel: string;
    loadingType: string;
    unloadingType: string;
    proposedPrice: number;
    currency: string;
    minimumPrice?: number;
    maximumPrice?: number;
    isNegotiable: boolean;
    additionalRequirements?: string;
    requiredServices?: string[];
    contactPerson: string;
    contactPhone: string;
    contactEmail?: string;
    expiresAt?: string;
    notificationsEnabled: boolean;
    isRecurring: boolean;
    recurrencePattern?: string;
    status: BookingStatus;
    createdAt: string;
    updatedAt: string;
    bids: BidEntity[];
    acceptedBidId?: string;
}
export interface BidEntity {
    id: string;
    bookingId: string;
    carrierId: string;
    carrierCompany: string;
    bidAmount: number;
    currency: string;
    proposedPickupTime: string;
    estimatedDeliveryTime: string;
    truckDetails: {
        makeModel: string;
        year: number;
        licensePlate: string;
        maxPayload: number;
        cargoVolume?: number;
        condition: string;
        mileage?: number;
        equipment?: string;
        availableServices?: string[];
        photoUrl?: string;
        insuranceNumber?: string;
        insuranceExpiryDate?: string;
    };
    driverDetails: {
        fullName: string;
        licenseNumber: string;
        licenseExpiryDate: string;
        experienceYears: number;
        contactPhone: string;
        rating?: number;
        completedTrips?: number;
        certifications?: string[];
    };
    message?: string;
    includedServices?: string[];
    bidExpiresAt?: string;
    isNegotiable: boolean;
    paymentTerms?: string;
    specialTerms?: string;
    minimumAcceptablePrice?: number;
    documentationUrl?: string;
    contactPerson: string;
    contactPhone: string;
    contactEmail?: string;
    status: BidStatus;
    createdAt: string;
    updatedAt: string;
}
export declare class BookingService {
    private readonly emailService;
    private readonly prisma;
    private readonly helperService;
    private readonly logger;
    private readonly bookings;
    private readonly bids;
    private readonly userBookings;
    private readonly userBids;
    constructor(emailService: EmailService, prisma: PrismaService, helperService: HelperService);
    createBooking(createBookingDto: CreateBookingDto, shipperId: string): Promise<Booking>;
    getBookings(userId?: string, status?: string, urgencyLevel?: string, truckType?: string, location?: string, limit?: number, offset?: number): Promise<{
        bookings: any[];
        total: number;
    }>;
    getBookingById(bookingId: string): Promise<any>;
    updateBookingStatus(bookingId: string, status: BookingStatus, userId: string): Promise<any>;
    createBid(createBidDto: CreateBidDto, carrierId: string): Promise<any>;
    getBidsForBooking(bookingId: string, userId: string): Promise<BidEntity[]>;
    getUserBids(userId: string): Promise<any[]>;
    updateBid(bidId: string, updateBidDto: UpdateBidDto, userId: string): Promise<any>;
    respondToBid(bidId: string, bidResponseDto: BidResponseDto, userId: string): Promise<any>;
    cancelBooking(bookingId: string, userId: string, reason?: string): Promise<BookingEntity>;
    getBookingStats(userId: string): Promise<{
        totalBookings: number;
        activeBookings: number;
        completedBookings: number;
        totalBids: number;
        acceptedBids: number;
        pendingBids: number;
    }>;
    private notifyCarriersOfNewBooking;
    private notifyShipperOfNewBid;
    private notifyBidAcceptance;
    private notifyRejectedBidders;
    private notifyBookingCancellation;
}
