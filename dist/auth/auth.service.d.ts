import { LoginDto } from './dto/login/login.dto';
import { EmailService } from '../email/email.service';
import { JwtPayload, Tokens } from '../shared/constants';
import { ResetPasswordDto } from './dto/reset-password.dto';
import { ForgotPasswordDto } from './dto/forgotPassword/forgetPassword.dto';
import { ForgotPasswordRO } from './dto/forgotPassword/adapter.dto';
import { JwtHandler } from './jwt.service';
import { UserRO } from './dto/login/adapter.dto';
import { HelperService } from '../shared/helper.service';
import { UpdateLocationDto } from './dto/updateLocation.dto';
import { PrismaService } from '../prisma/prisma.service';
import { ShipperService } from '../shipper/shipper.service';
import { CarrierService } from '../carrier/carrier.service';
import { CreateCompanyDto } from './dto/signup.dto';
export declare class AuthService {
    private readonly prisma;
    private readonly jwtService;
    private readonly emailService;
    private readonly helperService;
    private readonly shipperService;
    private readonly carrierService;
    private logger;
    constructor(prisma: PrismaService, jwtService: JwtHandler, emailService: EmailService, helperService: HelperService, shipperService: ShipperService, carrierService: CarrierService);
    createUser(userDetails: CreateCompanyDto): Promise<UserRO>;
    login(loginDetails: LoginDto): Promise<UserRO>;
    logout(id: string): Promise<void>;
    forgotPassword: (details: ForgotPasswordDto) => Promise<ForgotPasswordRO>;
    resetPassword(resetData: ResetPasswordDto): Promise<ForgotPasswordRO>;
    refreshToken(refreshToken: string, payload: JwtPayload): Promise<Tokens>;
    updateRefreshToken(id: string, refreshToken: string): Promise<void>;
    updateLocation(id: string, updateLocationDto: UpdateLocationDto): Promise<any>;
    getUserProfile(userId: string): Promise<{
        description: string | null;
        companyName: string;
        contactPhone: string;
        contactFirstName: string;
        contactLastName: string;
        userId: string;
        registrationNumber: string | null;
        taxId: string | null;
        businessEmail: string;
        phoneNumber: string;
        website: string | null;
        companySize: import(".prisma/client").$Enums.CompanySize;
        street: string;
        city: string;
        state: string;
        postalCode: string;
        countryCode: string;
        contactJobTitle: string;
        contactEmail: string;
        expectedMonthlyVolume: string | null;
        operatingRegions: string | null;
        marketingOptIn: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    } | {
        description: string | null;
        companyName: string;
        contactPhone: string;
        contactFirstName: string;
        contactLastName: string;
        userId: string;
        registrationNumber: string | null;
        taxId: string | null;
        businessEmail: string;
        phoneNumber: string;
        website: string | null;
        companySize: import(".prisma/client").$Enums.CompanySize;
        street: string;
        city: string;
        state: string;
        postalCode: string;
        countryCode: string;
        contactJobTitle: string;
        contactEmail: string;
        operatingRegions: string | null;
        marketingOptIn: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isVerified: boolean;
        fleetSize: string | null;
        rating: number | null;
        completedJobs: number;
    } | null>;
}
