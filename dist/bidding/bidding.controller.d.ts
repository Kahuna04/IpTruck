import { BiddingService } from './bidding.service';
import { CreateBidDto } from './dto/create-bid.dto';
import { UpdateBidDto } from './dto/update-bid.dto';
import { BidStatus } from '@prisma/client';
interface User {
    id: string;
    email: string;
    role: string;
}
export declare class BiddingController {
    private readonly biddingService;
    constructor(biddingService: BiddingService);
    create(createBidDto: CreateBidDto, user: User): Promise<{
        message: string;
        data: {
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        };
    }>;
    findAll(bookingId?: string, bidderId?: string, status?: BidStatus, minAmount?: number, maxAmount?: number, currency?: string, page: number | undefined, limit: number | undefined, sortBy: string | undefined, sortOrder: "asc" | "desc" | undefined, user: User): Promise<{
        message: string;
        data: ({
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        })[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    }>;
    findMyBids(status?: BidStatus, page: number | undefined, limit: number | undefined, user: User): Promise<{
        message: string;
        data: ({
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        })[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    }>;
    findBidsForBooking(bookingId: string, status?: BidStatus, page: number | undefined, limit: number | undefined, user: User): Promise<{
        message: string;
        data: ({
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        })[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            pages: number;
        };
    }>;
    findOne(id: string, user: User): Promise<{
        message: string;
        data: {
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        };
    }>;
    update(id: string, updateBidDto: UpdateBidDto, user: User): Promise<{
        message: string;
        data: {
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        };
    }>;
    acceptBid(id: string, user: User): Promise<{
        message: string;
        data: {
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        };
    }>;
    rejectBid(id: string, user: User): Promise<{
        message: string;
        data: {
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        };
    }>;
    cancelBid(id: string, user: User): Promise<{
        message: string;
        data: {
            carrier: {
                description: string | null;
                companyName: string;
                contactPhone: string;
                contactFirstName: string;
                contactLastName: string;
                userId: string;
                registrationNumber: string | null;
                taxId: string | null;
                businessEmail: string;
                phoneNumber: string;
                website: string | null;
                companySize: import(".prisma/client").$Enums.CompanySize;
                street: string;
                city: string;
                state: string;
                postalCode: string;
                countryCode: string;
                contactJobTitle: string;
                contactEmail: string;
                operatingRegions: string | null;
                marketingOptIn: boolean;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                isVerified: boolean;
                fleetSize: string | null;
                rating: number | null;
                completedJobs: number;
            };
            booking: {
                description: string;
                referenceNumber: string | null;
                pickupLocation: import("@prisma/client/runtime/library").JsonValue;
                deliveryLocation: import("@prisma/client/runtime/library").JsonValue;
                contactPerson: string;
                contactPhone: string;
                urgencyLevel: import(".prisma/client").$Enums.UrgencyLevel;
                preferredPickupTime: Date;
                proposedPrice: number;
                expiresAt: Date | null;
                status: import(".prisma/client").$Enums.BookingStatus;
                currency: string;
                contactEmail: string | null;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                shipperId: string;
                cargoDetails: import("@prisma/client/runtime/library").JsonValue;
                preferredTruckType: string;
                latestPickupTime: Date | null;
                requiredDeliveryTime: Date | null;
                loadingType: string;
                unloadingType: string;
                minimumPrice: number | null;
                maximumPrice: number | null;
                isNegotiable: boolean;
                additionalRequirements: string | null;
                requiredServices: string[];
                notificationsEnabled: boolean;
                isRecurring: boolean;
                recurrencePattern: string | null;
                acceptedBidId: string | null;
            };
        } & {
            message: string | null;
            bookingId: string;
            contactPerson: string;
            contactPhone: string;
            bidAmount: number;
            proposedPickupTime: Date;
            estimatedDeliveryTime: Date;
            status: import(".prisma/client").$Enums.BidStatus;
            currency: string;
            contactEmail: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isNegotiable: boolean;
            carrierId: string;
            truckDetails: import("@prisma/client/runtime/library").JsonValue;
            driverDetails: import("@prisma/client/runtime/library").JsonValue;
            includedServices: string[];
            bidExpiresAt: Date | null;
            paymentTerms: string | null;
            specialTerms: string | null;
            minimumAcceptablePrice: number | null;
            documentationUrl: string | null;
        };
    }>;
    getStats(user: User): Promise<{
        message: string;
        data: {
            totalBids: number;
            pendingBids: number;
            acceptedBids: number;
            rejectedBids: number;
            cancelledBids: number;
            averageBidAmount: number;
            userBidCount: number;
        };
    }>;
    remove(id: string, user: User): Promise<{
        message: string;
    }>;
}
export {};
