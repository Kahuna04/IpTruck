import { CarrierService } from './carrier.service';
import { CreateCarrierDto } from './dto/create-carrier.dto';
import { UpdateCarrierDto } from './dto/update-carrier.dto';
import { CreateTruckDto } from './dto/create-truck.dto';
import { UpdateTruckDto } from './dto/update-truck.dto';
import { Request } from 'express';
export declare class CarrierController {
    private readonly carrierService;
    constructor(carrierService: CarrierService);
    create(createCarrierDto: CreateCarrierDto, req: Request): Promise<{
        description: string | null;
        companyName: string;
        contactPhone: string;
        contactFirstName: string;
        contactLastName: string;
        userId: string;
        registrationNumber: string | null;
        taxId: string | null;
        businessEmail: string;
        phoneNumber: string;
        website: string | null;
        companySize: import(".prisma/client").$Enums.CompanySize;
        street: string;
        city: string;
        state: string;
        postalCode: string;
        countryCode: string;
        contactJobTitle: string;
        contactEmail: string;
        operatingRegions: string | null;
        marketingOptIn: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isVerified: boolean;
        fleetSize: string | null;
        rating: number | null;
        completedJobs: number;
    }>;
    findAll(page: number, limit: number): Promise<{
        data: ({
            user: {
                email: string;
                id: string;
                createdAt: Date;
                isActive: boolean;
                isVerified: boolean;
            };
            _count: {
                bids: number;
                trucks: number;
            };
        } & {
            description: string | null;
            companyName: string;
            contactPhone: string;
            contactFirstName: string;
            contactLastName: string;
            userId: string;
            registrationNumber: string | null;
            taxId: string | null;
            businessEmail: string;
            phoneNumber: string;
            website: string | null;
            companySize: import(".prisma/client").$Enums.CompanySize;
            street: string;
            city: string;
            state: string;
            postalCode: string;
            countryCode: string;
            contactJobTitle: string;
            contactEmail: string;
            operatingRegions: string | null;
            marketingOptIn: boolean;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isVerified: boolean;
            fleetSize: string | null;
            rating: number | null;
            completedJobs: number;
        })[];
        pagination: {
            currentPage: number;
            totalPages: number;
            totalItems: number;
            itemsPerPage: number;
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            nextPage: number | null;
            previousPage: number | null;
        };
    }>;
    search(query: string, page: number, limit: number): Promise<{
        data: ({
            user: {
                email: string;
                id: string;
                createdAt: Date;
                isActive: boolean;
                isVerified: boolean;
            };
            _count: {
                bids: number;
                trucks: number;
            };
        } & {
            description: string | null;
            companyName: string;
            contactPhone: string;
            contactFirstName: string;
            contactLastName: string;
            userId: string;
            registrationNumber: string | null;
            taxId: string | null;
            businessEmail: string;
            phoneNumber: string;
            website: string | null;
            companySize: import(".prisma/client").$Enums.CompanySize;
            street: string;
            city: string;
            state: string;
            postalCode: string;
            countryCode: string;
            contactJobTitle: string;
            contactEmail: string;
            operatingRegions: string | null;
            marketingOptIn: boolean;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isVerified: boolean;
            fleetSize: string | null;
            rating: number | null;
            completedJobs: number;
        })[];
        pagination: {
            currentPage: number;
            totalPages: number;
            totalItems: number;
            itemsPerPage: number;
            hasNextPage: boolean;
            hasPreviousPage: boolean;
            nextPage: number | null;
            previousPage: number | null;
        };
    }>;
    getMyProfile(req: Request): Promise<{
        description: string | null;
        companyName: string;
        contactPhone: string;
        contactFirstName: string;
        contactLastName: string;
        userId: string;
        registrationNumber: string | null;
        taxId: string | null;
        businessEmail: string;
        phoneNumber: string;
        website: string | null;
        companySize: import(".prisma/client").$Enums.CompanySize;
        street: string;
        city: string;
        state: string;
        postalCode: string;
        countryCode: string;
        contactJobTitle: string;
        contactEmail: string;
        operatingRegions: string | null;
        marketingOptIn: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isVerified: boolean;
        fleetSize: string | null;
        rating: number | null;
        completedJobs: number;
    } | null>;
    findOne(id: string): Promise<{
        description: string | null;
        companyName: string;
        contactPhone: string;
        contactFirstName: string;
        contactLastName: string;
        userId: string;
        registrationNumber: string | null;
        taxId: string | null;
        businessEmail: string;
        phoneNumber: string;
        website: string | null;
        companySize: import(".prisma/client").$Enums.CompanySize;
        street: string;
        city: string;
        state: string;
        postalCode: string;
        countryCode: string;
        contactJobTitle: string;
        contactEmail: string;
        operatingRegions: string | null;
        marketingOptIn: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isVerified: boolean;
        fleetSize: string | null;
        rating: number | null;
        completedJobs: number;
    }>;
    getStatistics(id: string): Promise<{
        rating: number | null;
        completedJobs: number;
        totalTrucks: number;
        totalBids: number;
        bidsByStatus: {};
        totalEarnings: number;
        currency: string;
    }>;
    update(id: string, updateCarrierDto: UpdateCarrierDto): Promise<{
        description: string | null;
        companyName: string;
        contactPhone: string;
        contactFirstName: string;
        contactLastName: string;
        userId: string;
        registrationNumber: string | null;
        taxId: string | null;
        businessEmail: string;
        phoneNumber: string;
        website: string | null;
        companySize: import(".prisma/client").$Enums.CompanySize;
        street: string;
        city: string;
        state: string;
        postalCode: string;
        countryCode: string;
        contactJobTitle: string;
        contactEmail: string;
        operatingRegions: string | null;
        marketingOptIn: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isVerified: boolean;
        fleetSize: string | null;
        rating: number | null;
        completedJobs: number;
    }>;
    updateRating(id: string, rating: number): Promise<{
        description: string | null;
        companyName: string;
        contactPhone: string;
        contactFirstName: string;
        contactLastName: string;
        userId: string;
        registrationNumber: string | null;
        taxId: string | null;
        businessEmail: string;
        phoneNumber: string;
        website: string | null;
        companySize: import(".prisma/client").$Enums.CompanySize;
        street: string;
        city: string;
        state: string;
        postalCode: string;
        countryCode: string;
        contactJobTitle: string;
        contactEmail: string;
        operatingRegions: string | null;
        marketingOptIn: boolean;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isVerified: boolean;
        fleetSize: string | null;
        rating: number | null;
        completedJobs: number;
    }>;
    remove(id: string): Promise<void>;
    addTruck(carrierId: string, createTruckDto: CreateTruckDto): Promise<{
        maxPayload: number;
        driverName: string | null;
        driverPhone: string | null;
        driverExperience: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        makeModel: string;
        year: number;
        licensePlate: string;
        cargoVolume: number | null;
        truckType: string;
        condition: string;
        mileage: number | null;
        equipment: string[];
        availableServices: string[];
        photoUrl: string | null;
        insuranceNumber: string | null;
        insuranceExpiryDate: Date | null;
        driverLicenseNumber: string | null;
        driverLicenseExpiry: Date | null;
        driverRating: number | null;
        carrierId: string;
    }>;
    getTrucks(carrierId: string): Promise<{
        maxPayload: number;
        driverName: string | null;
        driverPhone: string | null;
        driverExperience: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        makeModel: string;
        year: number;
        licensePlate: string;
        cargoVolume: number | null;
        truckType: string;
        condition: string;
        mileage: number | null;
        equipment: string[];
        availableServices: string[];
        photoUrl: string | null;
        insuranceNumber: string | null;
        insuranceExpiryDate: Date | null;
        driverLicenseNumber: string | null;
        driverLicenseExpiry: Date | null;
        driverRating: number | null;
        carrierId: string;
    }[]>;
    getTruckById(truckId: string): Promise<{
        maxPayload: number;
        driverName: string | null;
        driverPhone: string | null;
        driverExperience: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        makeModel: string;
        year: number;
        licensePlate: string;
        cargoVolume: number | null;
        truckType: string;
        condition: string;
        mileage: number | null;
        equipment: string[];
        availableServices: string[];
        photoUrl: string | null;
        insuranceNumber: string | null;
        insuranceExpiryDate: Date | null;
        driverLicenseNumber: string | null;
        driverLicenseExpiry: Date | null;
        driverRating: number | null;
        carrierId: string;
    }>;
    updateTruck(truckId: string, updateTruckDto: UpdateTruckDto): Promise<{
        maxPayload: number;
        driverName: string | null;
        driverPhone: string | null;
        driverExperience: number | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        makeModel: string;
        year: number;
        licensePlate: string;
        cargoVolume: number | null;
        truckType: string;
        condition: string;
        mileage: number | null;
        equipment: string[];
        availableServices: string[];
        photoUrl: string | null;
        insuranceNumber: string | null;
        insuranceExpiryDate: Date | null;
        driverLicenseNumber: string | null;
        driverLicenseExpiry: Date | null;
        driverRating: number | null;
        carrierId: string;
    }>;
    removeTruck(truckId: string): Promise<void>;
}
